{"version":3,"sources":["components/Number.js","components/Filter.js","services/personService.js","App.js","index.js"],"names":["Number","person","deleteHandler","name","number","onClick","Filter","props","onChange","value","text","baseUrl","axios","get","then","response","data","personToAdd","post","id","delete","personObject","put","PersonForm","addPerson","inputChangeName","inputChangeNum","newName","newNumber","onSubmit","type","Persons","filter","persons","list","toLowerCase","indexOf","map","key","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","useEffect","personService","personList","messageTimer","messageObject","setTimeout","event","target","preventDefault","some","window","confirm","find","p","toLocaleLowerCase","changedPerson","returnedObject","catch","error","returnedPerson","concat","alert","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.506e1d74.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Number = ({ person, deleteHandler }) => {\r\n  return (\r\n    <div>{person.name} {person.number} <button onClick={deleteHandler}>delete</button></div>\r\n)}\r\n\r\nexport default Number","import React from 'react'\r\n\r\nconst Filter = (props) => (\r\n      <input onChange={props.onChange} value={props.text}/>\r\n)  \r\n\r\nexport default Filter","import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/app/persons'\r\nconst baseUrl = '/app/persons'\r\n\r\nconst getPersons = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst personToServer = (personToAdd) => {\r\n  const request = axios.post(baseUrl, personToAdd)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst removePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request\r\n}\r\n\r\nconst replaceNumber = (personObject) => {\r\n  const request = axios.put(`${baseUrl}/${personObject.id}`, personObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getPersons, personToServer, removePerson, replaceNumber }","import React, { useState, useEffect } from 'react'\nimport Number from './components/Number'\nimport Filter from './components/Filter'\nimport personService from './services/personService'\nimport './index.css'\n\n// Komponentti PersonForm. Luo form-elementin, johon syötetään uuden henkilön tiedot\nconst PersonForm = ({ addPerson, inputChangeName, inputChangeNum, newName, newNumber }) => {\n  return (\n  <form onSubmit={addPerson}>\n        <div>name: <input onChange={inputChangeName} value={newName}/></div>\n        <div>number: <input onChange={inputChangeNum} value={newNumber}/></div>\n        <div><button type=\"submit\">add</button></div>\n  </form>\n  )\n}\n\n// Komponentti Persons. Palauttaa henkilölistan, joka luodaan Number-komponentin avulla. Ei paras mahdollinen ratkaisu kaikkine välivaiheineen, mutta toimii.\nconst Persons = ({ filter, persons, deleteHandler }) => {\n  // Eritellään personsToShow-muuttujaan kaikki oliot, joiden nimikenttä sisältää hakuehdot. Jos hakukenttä on tyhjä, palautetaan kaikki oliot.\n  const personsToShow = (filter === '') ? persons : \n    persons.filter(person => person.name.toLowerCase().indexOf(filter.toLowerCase()) !== -1)\n\n  const list = personsToShow.map(person =>\n    <Number key={person.name} person={person} deleteHandler={() => deleteHandler(person)} /> \n  )\n\n  return (\n    <div>{list}</div>\n  )  \n}\n\n// Komponentti Notification. Näyttää ilmoituket tietojen lisäyksistä ja poistoista\nconst Notification = ( {message} ) => {\n  if(message === null) {\n    return null\n  }\n\n  if(message.type === 'error') {\n    return (\n      <div className='error'>\n        {message.message}\n      </div>\n    )\n  }\n\n  return (\n    <div className='notification'>\n      {message.message}\n    </div>\n  )\n}\n\nconst App = () => {\n  // Tilat\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState(null)\n\n  // Kutsutaan efektin sisältä personServicen getPersons()-funktiota, joka palauttaa koko \n  // nimilistan taulukkona palvelimelta.\n  useEffect(() => {\n    personService.getPersons().then(personList => setPersons(personList))\n  }, [])\n\n  // Input-handlerit\n  const inputChangeName = (event) => setNewName(event.target.value)\n  const inputChangeNum = (event) => setNewNumber(event.target.value)\n  const inputChangeFilter = (event) => setFilter(event.target.value)\n\n  // messageTimer. Asettaa parametrina saadun viestin tilaan funktiolla setMessage, ja neljän sekunnin \n  // kuluttua asettaa tilaksi null, jolloin viestikenttä poistuu\n  const messageTimer = (messageObject) => {    \n    setMessage(messageObject)\n    setTimeout(() => {\n      setMessage(null)\n    }, 4000)\n  }\n\n  // Uusi tieto. Muodostetaan input-kenttien arvon pohjalta lukemalla newName ja newNumber.\n  const addPerson = (event) => {\n    event.preventDefault()\n    // Testataan, onko nimi jo listalla. Mikäli on, pyydetään lupaa tietojen muuttamiseen.\n    const duplicate = persons.some(person => person.name.toLowerCase() === newName.toLowerCase())    \n    if(duplicate) {\n      // Jos nimi löytyy listalta, haetaan persons-tilasta nimen perusteella oikea resurssi, ja tehdään sen pohjalta uusi olio. \n      // Se lähetetään personServicen päivitysmetodiin, joka korjaa tiedot palvelimelle.\n      // Jos palautuu reject-tilassa oleva Promise, annetaan virheilmoitus käyttäen Notificationia.\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.find(p => p.name.toLowerCase() === newName.toLocaleLowerCase())\n        const changedPerson = { ...person, number: newNumber}\n        personService.replaceNumber(changedPerson)\n          .then(returnedObject => {\n            setPersons(persons.map(p => p.id === returnedObject.id ? returnedObject : p))\n            messageTimer(\n              {\n                message: `Updated ${returnedObject.name}`, \n                type: 'success'\n              }\n            )\n          })\n          .catch(error => {\n            messageTimer(\n              {\n                message: `Information of ${changedPerson.name} has already been removed from server`, \n                type: 'error'\n              }\n            )\n            setPersons(persons.filter(p => p.id !== person.id))\n          })\n      }\n      return\n    }\n\n    // Tilasta saatujen tietojen pohjalta uusi person-olio.\n    const person = { name: newName, number: newNumber }\n\n    // Lisätään personServicellä uusi henkilö palvelimelle. Onnistuneen tapahtuneen yhteydessä palvelin \n    // palauttaa Promisena lisätyn person-olion, joka asetetaan concatilla persons-taulukon jatkeeksi.\n    personService.personToServer(person)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        messageTimer(\n          {\n            message: `Added ${returnedPerson.name}`, \n            type: 'success'\n          }\n        )\n      })\n      .catch(error => alert(`Henkilön ${person.name} lisääminen palvelimelle epäonnistui: ${error}`))\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  // Tapahtumankäsittelijä delete-napille\n  const deleteHandler = person => {\n    if(window.confirm(`Delete ${person.name}?`)) {\n      personService.removePerson(person.id)\n        .then(response => {\n          messageTimer(\n            {\n              message: `${person.name} removed`, \n              type: 'success'\n            }\n          )\n          setPersons(persons.filter(p => p.id !== person.id))\n        }).catch(error => console.log(`Removal failed: ${error}`))\n    }\n  }\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter onChange={inputChangeFilter} text={filter} />\n      <h3>Add new</h3>\n      <PersonForm \n        addPerson={addPerson} \n        inputChangeName={inputChangeName} \n        inputChangeNum={inputChangeNum}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <h3>Numbers</h3>\n      <Persons \n        filter={filter} \n        persons={persons}\n        deleteHandler={deleteHandler}\n      />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}